<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="390.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="373" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="373" > </text>
<g id="frames">
<g >
<title>core::slice::from_raw_parts (8,833 samples, 3.06%)</title><rect x="1152.2" y="309" width="36.1" height="15.0" fill="rgb(220,207,4)" rx="2" ry="2" />
<text  x="1155.21" y="319.5" >cor..</text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (67 samples, 0.02%)</title><rect x="317.1" y="149" width="0.3" height="15.0" fill="rgb(235,18,29)" rx="2" ry="2" />
<text  x="320.13" y="159.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (3,340 samples, 1.16%)</title><rect x="340.9" y="309" width="13.6" height="15.0" fill="rgb(220,3,32)" rx="2" ry="2" />
<text  x="343.86" y="319.5" ></text>
</g>
<g >
<title>shmem_getpage_gfp (25 samples, 0.01%)</title><rect x="321.8" y="181" width="0.1" height="15.0" fill="rgb(242,57,19)" rx="2" ry="2" />
<text  x="324.84" y="191.5" ></text>
</g>
<g >
<title>do_syscall_64 (772 samples, 0.27%)</title><rect x="318.8" y="277" width="3.2" height="15.0" fill="rgb(253,177,35)" rx="2" ry="2" />
<text  x="321.81" y="287.5" ></text>
</g>
<g >
<title>vfs_read (772 samples, 0.27%)</title><rect x="318.8" y="245" width="3.2" height="15.0" fill="rgb(218,185,52)" rx="2" ry="2" />
<text  x="321.81" y="255.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (133 samples, 0.05%)</title><rect x="953.5" y="293" width="0.5" height="15.0" fill="rgb(205,195,17)" rx="2" ry="2" />
<text  x="956.50" y="303.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (53 samples, 0.02%)</title><rect x="318.6" y="85" width="0.2" height="15.0" fill="rgb(238,163,29)" rx="2" ry="2" />
<text  x="321.58" y="95.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (67 samples, 0.02%)</title><rect x="317.1" y="165" width="0.3" height="15.0" fill="rgb(213,174,37)" rx="2" ry="2" />
<text  x="320.13" y="175.5" ></text>
</g>
<g >
<title>shmem_alloc_and_acct_page (36 samples, 0.01%)</title><rect x="318.3" y="101" width="0.1" height="15.0" fill="rgb(222,196,1)" rx="2" ry="2" />
<text  x="321.27" y="111.5" ></text>
</g>
<g >
<title>clear_page_erms (62 samples, 0.02%)</title><rect x="952.6" y="181" width="0.3" height="15.0" fill="rgb(252,157,42)" rx="2" ry="2" />
<text  x="955.62" y="191.5" ></text>
</g>
<g >
<title>&lt;core::slice::Chunks&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16,599 samples, 5.75%)</title><rect x="249.2" y="309" width="67.9" height="15.0" fill="rgb(210,221,18)" rx="2" ry="2" />
<text  x="252.24" y="319.5" >&lt;core::..</text>
</g>
<g >
<title>iov_iter_copy_from_user_atomic (118 samples, 0.04%)</title><rect x="317.4" y="133" width="0.5" height="15.0" fill="rgb(224,131,26)" rx="2" ry="2" />
<text  x="320.44" y="143.5" ></text>
</g>
<g >
<title>all (288,598 samples, 100%)</title><rect x="10.0" y="341" width="1180.0" height="15.0" fill="rgb(249,56,52)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>core::ptr::&lt;impl *mut T&gt;::is_null (5,828 samples, 2.02%)</title><rect x="827.1" y="309" width="23.8" height="15.0" fill="rgb(249,37,29)" rx="2" ry="2" />
<text  x="830.09" y="319.5" >c..</text>
</g>
<g >
<title>shmem_write_begin (100 samples, 0.03%)</title><rect x="318.0" y="133" width="0.4" height="15.0" fill="rgb(229,129,15)" rx="2" ry="2" />
<text  x="321.02" y="143.5" ></text>
</g>
<g >
<title>futex_wait_queue_me (55 samples, 0.02%)</title><rect x="318.6" y="197" width="0.2" height="15.0" fill="rgb(231,227,15)" rx="2" ry="2" />
<text  x="321.58" y="207.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (20,998 samples, 7.28%)</title><rect x="94.0" y="309" width="85.8" height="15.0" fill="rgb(211,183,40)" rx="2" ry="2" />
<text  x="96.97" y="319.5" >&lt;core::ops..</text>
</g>
<g >
<title>unmap_vmas (74 samples, 0.03%)</title><rect x="322.1" y="197" width="0.3" height="15.0" fill="rgb(221,1,1)" rx="2" ry="2" />
<text  x="325.13" y="207.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (7,059 samples, 2.45%)</title><rect x="220.4" y="309" width="28.8" height="15.0" fill="rgb(212,111,38)" rx="2" ry="2" />
<text  x="223.37" y="319.5" >&lt;c..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::push (14,874 samples, 5.15%)</title><rect x="354.5" y="309" width="60.8" height="15.0" fill="rgb(233,63,16)" rx="2" ry="2" />
<text  x="357.52" y="319.5" >alloc:..</text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::as_ptr (3,682 samples, 1.28%)</title><rect x="954.1" y="309" width="15.0" height="15.0" fill="rgb(205,145,15)" rx="2" ry="2" />
<text  x="957.05" y="319.5" ></text>
</g>
<g >
<title>release_pages (46 samples, 0.02%)</title><rect x="322.2" y="117" width="0.2" height="15.0" fill="rgb(224,25,42)" rx="2" ry="2" />
<text  x="325.24" y="127.5" ></text>
</g>
<g >
<title>native_write_msr (35 samples, 0.01%)</title><rect x="318.6" y="69" width="0.2" height="15.0" fill="rgb(242,54,7)" rx="2" ry="2" />
<text  x="321.63" y="79.5" ></text>
</g>
<g >
<title>alloc_pages_vma (121 samples, 0.04%)</title><rect x="952.6" y="213" width="0.4" height="15.0" fill="rgb(215,134,13)" rx="2" ry="2" />
<text  x="955.56" y="223.5" ></text>
</g>
<g >
<title>iov_iter_fault_in_readable (25 samples, 0.01%)</title><rect x="317.9" y="133" width="0.1" height="15.0" fill="rgb(246,132,18)" rx="2" ry="2" />
<text  x="320.92" y="143.5" ></text>
</g>
<g >
<title>[unknown] (77 samples, 0.03%)</title><rect x="317.1" y="293" width="0.3" height="15.0" fill="rgb(230,140,40)" rx="2" ry="2" />
<text  x="320.11" y="303.5" ></text>
</g>
<g >
<title>__sched_yield (27 samples, 0.01%)</title><rect x="1188.6" y="293" width="0.2" height="15.0" fill="rgb(234,30,14)" rx="2" ry="2" />
<text  x="1191.65" y="303.5" ></text>
</g>
<g >
<title>core::ptr::&lt;impl *const T&gt;::add (9,416 samples, 3.26%)</title><rect x="720.6" y="309" width="38.5" height="15.0" fill="rgb(217,67,4)" rx="2" ry="2" />
<text  x="723.62" y="319.5" >cor..</text>
</g>
<g >
<title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (1,715 samples, 0.59%)</title><rect x="920.8" y="309" width="7.0" height="15.0" fill="rgb(229,186,7)" rx="2" ry="2" />
<text  x="923.78" y="319.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (116 samples, 0.04%)</title><rect x="317.4" y="117" width="0.5" height="15.0" fill="rgb(247,66,20)" rx="2" ry="2" />
<text  x="320.45" y="127.5" ></text>
</g>
<g >
<title>__clone (77 samples, 0.03%)</title><rect x="317.1" y="261" width="0.3" height="15.0" fill="rgb(223,183,27)" rx="2" ry="2" />
<text  x="320.11" y="271.5" ></text>
</g>
<g >
<title>generic_perform_write (271 samples, 0.09%)</title><rect x="317.4" y="149" width="1.1" height="15.0" fill="rgb(249,76,19)" rx="2" ry="2" />
<text  x="320.43" y="159.5" ></text>
</g>
<g >
<title>get_page_from_freelist (35 samples, 0.01%)</title><rect x="952.9" y="181" width="0.1" height="15.0" fill="rgb(227,209,0)" rx="2" ry="2" />
<text  x="955.88" y="191.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (276 samples, 0.10%)</title><rect x="317.4" y="277" width="1.2" height="15.0" fill="rgb(229,41,5)" rx="2" ry="2" />
<text  x="320.43" y="287.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (634 samples, 0.22%)</title><rect x="318.9" y="165" width="2.6" height="15.0" fill="rgb(226,225,21)" rx="2" ry="2" />
<text  x="321.87" y="175.5" ></text>
</g>
<g >
<title>std::sys::unix::thread::Thread::new (77 samples, 0.03%)</title><rect x="317.1" y="277" width="0.3" height="15.0" fill="rgb(246,108,3)" rx="2" ry="2" />
<text  x="320.11" y="287.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (20,536 samples, 7.12%)</title><rect x="10.0" y="309" width="84.0" height="15.0" fill="rgb(234,186,48)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >&lt;core::op..</text>
</g>
<g >
<title>handle_mm_fault (277 samples, 0.10%)</title><rect x="952.3" y="245" width="1.1" height="15.0" fill="rgb(240,100,5)" rx="2" ry="2" />
<text  x="955.31" y="255.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (44 samples, 0.02%)</title><rect x="953.1" y="213" width="0.1" height="15.0" fill="rgb(220,11,13)" rx="2" ry="2" />
<text  x="956.06" y="223.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (36 samples, 0.01%)</title><rect x="321.7" y="149" width="0.1" height="15.0" fill="rgb(229,69,24)" rx="2" ry="2" />
<text  x="324.69" y="159.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (111 samples, 0.04%)</title><rect x="952.6" y="197" width="0.4" height="15.0" fill="rgb(236,23,36)" rx="2" ry="2" />
<text  x="955.58" y="207.5" ></text>
</g>
<g >
<title>finish_task_switch (55 samples, 0.02%)</title><rect x="318.6" y="149" width="0.2" height="15.0" fill="rgb(245,149,19)" rx="2" ry="2" />
<text  x="321.58" y="159.5" ></text>
</g>
<g >
<title>error_entry (36 samples, 0.01%)</title><rect x="951.9" y="293" width="0.1" height="15.0" fill="rgb(239,8,29)" rx="2" ry="2" />
<text  x="954.89" y="303.5" ></text>
</g>
<g >
<title>schedule_tail (72 samples, 0.02%)</title><rect x="317.1" y="229" width="0.3" height="15.0" fill="rgb(224,131,54)" rx="2" ry="2" />
<text  x="320.12" y="239.5" ></text>
</g>
<g >
<title>pthread_cond_wait@@GLIBC_2.3.2 (58 samples, 0.02%)</title><rect x="318.6" y="293" width="0.2" height="15.0" fill="rgb(227,104,11)" rx="2" ry="2" />
<text  x="321.57" y="303.5" ></text>
</g>
<g >
<title>core::ptr::write (6,421 samples, 2.22%)</title><rect x="927.8" y="309" width="26.2" height="15.0" fill="rgb(251,152,0)" rx="2" ry="2" />
<text  x="930.79" y="319.5" >c..</text>
</g>
<g >
<title>do_syscall_64 (57 samples, 0.02%)</title><rect x="318.6" y="261" width="0.2" height="15.0" fill="rgb(219,93,15)" rx="2" ry="2" />
<text  x="321.57" y="271.5" ></text>
</g>
<g >
<title>vm_munmap (101 samples, 0.03%)</title><rect x="322.0" y="245" width="0.4" height="15.0" fill="rgb(247,171,12)" rx="2" ry="2" />
<text  x="325.02" y="255.5" ></text>
</g>
<g >
<title>unmap_single_vma (74 samples, 0.03%)</title><rect x="322.1" y="181" width="0.3" height="15.0" fill="rgb(213,202,43)" rx="2" ry="2" />
<text  x="325.13" y="191.5" ></text>
</g>
<g >
<title>core::ptr::&lt;impl *mut T&gt;::add (3,144 samples, 1.09%)</title><rect x="814.2" y="309" width="12.9" height="15.0" fill="rgb(234,204,14)" rx="2" ry="2" />
<text  x="817.24" y="319.5" ></text>
</g>
<g >
<title>__activate_page (29 samples, 0.01%)</title><rect x="321.7" y="133" width="0.1" height="15.0" fill="rgb(249,63,30)" rx="2" ry="2" />
<text  x="324.70" y="143.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4,502 samples, 1.56%)</title><rect x="322.5" y="309" width="18.4" height="15.0" fill="rgb(207,167,8)" rx="2" ry="2" />
<text  x="325.45" y="319.5" ></text>
</g>
<g >
<title>new_sync_read (772 samples, 0.27%)</title><rect x="318.8" y="213" width="3.2" height="15.0" fill="rgb(215,50,33)" rx="2" ry="2" />
<text  x="321.81" y="223.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (98 samples, 0.03%)</title><rect x="953.6" y="277" width="0.4" height="15.0" fill="rgb(227,2,35)" rx="2" ry="2" />
<text  x="956.64" y="287.5" ></text>
</g>
<g >
<title>copy_page_to_iter (678 samples, 0.23%)</title><rect x="318.8" y="181" width="2.8" height="15.0" fill="rgb(252,82,9)" rx="2" ry="2" />
<text  x="321.84" y="191.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (25 samples, 0.01%)</title><rect x="322.0" y="149" width="0.1" height="15.0" fill="rgb(220,22,49)" rx="2" ry="2" />
<text  x="325.02" y="159.5" ></text>
</g>
<g >
<title>core::ops::function::FnOnce::call_once (3,348 samples, 1.16%)</title><rect x="706.9" y="309" width="13.7" height="15.0" fill="rgb(230,45,16)" rx="2" ry="2" />
<text  x="709.92" y="319.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (27 samples, 0.01%)</title><rect x="321.2" y="69" width="0.1" height="15.0" fill="rgb(232,21,26)" rx="2" ry="2" />
<text  x="324.17" y="79.5" ></text>
</g>
<g >
<title>__vfs_write (276 samples, 0.10%)</title><rect x="317.4" y="213" width="1.2" height="15.0" fill="rgb(221,211,19)" rx="2" ry="2" />
<text  x="320.43" y="223.5" ></text>
</g>
<g >
<title>__generic_file_write_iter (276 samples, 0.10%)</title><rect x="317.4" y="165" width="1.2" height="15.0" fill="rgb(221,129,24)" rx="2" ry="2" />
<text  x="320.43" y="175.5" ></text>
</g>
<g >
<title>do_syscall_64 (276 samples, 0.10%)</title><rect x="317.4" y="261" width="1.2" height="15.0" fill="rgb(218,25,19)" rx="2" ry="2" />
<text  x="320.43" y="271.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (101 samples, 0.03%)</title><rect x="320.7" y="53" width="0.4" height="15.0" fill="rgb(251,29,27)" rx="2" ry="2" />
<text  x="323.74" y="63.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (53 samples, 0.02%)</title><rect x="318.6" y="101" width="0.2" height="15.0" fill="rgb(233,139,21)" rx="2" ry="2" />
<text  x="321.58" y="111.5" ></text>
</g>
<g >
<title>do_page_fault (229 samples, 0.08%)</title><rect x="320.5" y="133" width="1.0" height="15.0" fill="rgb(248,103,5)" rx="2" ry="2" />
<text  x="323.52" y="143.5" ></text>
</g>
<g >
<title>do_futex (56 samples, 0.02%)</title><rect x="318.6" y="229" width="0.2" height="15.0" fill="rgb(205,208,25)" rx="2" ry="2" />
<text  x="321.57" y="239.5" ></text>
</g>
<g >
<title>rayon_core::registry::ThreadBuilder::run (370 samples, 0.13%)</title><rect x="1188.4" y="309" width="1.6" height="15.0" fill="rgb(218,129,16)" rx="2" ry="2" />
<text  x="1191.44" y="319.5" ></text>
</g>
<g >
<title>shmem_write_end (26 samples, 0.01%)</title><rect x="318.4" y="133" width="0.1" height="15.0" fill="rgb(241,151,41)" rx="2" ry="2" />
<text  x="321.43" y="143.5" ></text>
</g>
<g >
<title>native_irq_return_iret (27 samples, 0.01%)</title><rect x="321.5" y="165" width="0.1" height="15.0" fill="rgb(206,161,26)" rx="2" ry="2" />
<text  x="324.49" y="175.5" ></text>
</g>
<g >
<title>schedule (55 samples, 0.02%)</title><rect x="318.6" y="181" width="0.2" height="15.0" fill="rgb(232,198,54)" rx="2" ry="2" />
<text  x="321.58" y="191.5" ></text>
</g>
<g >
<title>__vfs_read (772 samples, 0.27%)</title><rect x="318.8" y="229" width="3.2" height="15.0" fill="rgb(249,152,43)" rx="2" ry="2" />
<text  x="321.81" y="239.5" ></text>
</g>
<g >
<title>sys_read (772 samples, 0.27%)</title><rect x="318.8" y="261" width="3.2" height="15.0" fill="rgb(210,53,29)" rx="2" ry="2" />
<text  x="321.81" y="271.5" ></text>
</g>
<g >
<title>__do_page_fault (228 samples, 0.08%)</title><rect x="320.5" y="117" width="1.0" height="15.0" fill="rgb(234,2,24)" rx="2" ry="2" />
<text  x="323.53" y="127.5" ></text>
</g>
<g >
<title>unmap_region (100 samples, 0.03%)</title><rect x="322.0" y="213" width="0.4" height="15.0" fill="rgb(246,176,42)" rx="2" ry="2" />
<text  x="325.02" y="223.5" ></text>
</g>
<g >
<title>__lru_cache_add (42 samples, 0.01%)</title><rect x="953.1" y="197" width="0.1" height="15.0" fill="rgb(253,58,10)" rx="2" ry="2" />
<text  x="956.07" y="207.5" ></text>
</g>
<g >
<title>page_fault (230 samples, 0.08%)</title><rect x="320.5" y="149" width="1.0" height="15.0" fill="rgb(224,113,47)" rx="2" ry="2" />
<text  x="323.52" y="159.5" ></text>
</g>
<g >
<title>finish_task_switch (72 samples, 0.02%)</title><rect x="317.1" y="213" width="0.3" height="15.0" fill="rgb(233,153,53)" rx="2" ry="2" />
<text  x="320.12" y="223.5" ></text>
</g>
<g >
<title>sync_regs (32 samples, 0.01%)</title><rect x="951.9" y="277" width="0.1" height="15.0" fill="rgb(248,188,16)" rx="2" ry="2" />
<text  x="954.90" y="287.5" ></text>
</g>
<g >
<title>ret_from_fork (75 samples, 0.03%)</title><rect x="317.1" y="245" width="0.3" height="15.0" fill="rgb(224,19,6)" rx="2" ry="2" />
<text  x="320.12" y="255.5" ></text>
</g>
<g >
<title>__handle_mm_fault (210 samples, 0.07%)</title><rect x="320.6" y="85" width="0.8" height="15.0" fill="rgb(252,80,42)" rx="2" ry="2" />
<text  x="323.56" y="95.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (26 samples, 0.01%)</title><rect x="322.0" y="197" width="0.1" height="15.0" fill="rgb(232,43,15)" rx="2" ry="2" />
<text  x="325.02" y="207.5" ></text>
</g>
<g >
<title>__libc_read (772 samples, 0.27%)</title><rect x="318.8" y="309" width="3.2" height="15.0" fill="rgb(217,154,52)" rx="2" ry="2" />
<text  x="321.81" y="319.5" ></text>
</g>
<g >
<title>codech::matrix::Matrix::decode (16,061 samples, 5.57%)</title><rect x="509.7" y="309" width="65.7" height="15.0" fill="rgb(245,221,14)" rx="2" ry="2" />
<text  x="512.73" y="319.5" >codech:..</text>
</g>
<g >
<title>__perf_event_task_sched_in (70 samples, 0.02%)</title><rect x="317.1" y="197" width="0.3" height="15.0" fill="rgb(231,151,34)" rx="2" ry="2" />
<text  x="320.12" y="207.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (30 samples, 0.01%)</title><rect x="1064.9" y="293" width="0.1" height="15.0" fill="rgb(223,145,42)" rx="2" ry="2" />
<text  x="1067.93" y="303.5" ></text>
</g>
<g >
<title>core::ptr::&lt;impl *const T&gt;::offset (13,481 samples, 4.67%)</title><rect x="759.1" y="309" width="55.1" height="15.0" fill="rgb(251,181,20)" rx="2" ry="2" />
<text  x="762.12" y="319.5" >core:..</text>
</g>
<g >
<title>__munmap (101 samples, 0.03%)</title><rect x="322.0" y="309" width="0.4" height="15.0" fill="rgb(213,97,5)" rx="2" ry="2" />
<text  x="325.02" y="319.5" ></text>
</g>
<g >
<title>page_fault (314 samples, 0.11%)</title><rect x="952.2" y="293" width="1.3" height="15.0" fill="rgb(213,127,53)" rx="2" ry="2" />
<text  x="955.21" y="303.5" ></text>
</g>
<g >
<title>activate_page (39 samples, 0.01%)</title><rect x="321.7" y="165" width="0.1" height="15.0" fill="rgb(216,130,10)" rx="2" ry="2" />
<text  x="324.68" y="175.5" ></text>
</g>
<g >
<title>x86_pmu_enable (53 samples, 0.02%)</title><rect x="318.6" y="117" width="0.2" height="15.0" fill="rgb(239,196,11)" rx="2" ry="2" />
<text  x="321.58" y="127.5" ></text>
</g>
<g >
<title>codech::codec::decode (23,085 samples, 8.00%)</title><rect x="415.3" y="309" width="94.4" height="15.0" fill="rgb(235,172,8)" rx="2" ry="2" />
<text  x="418.34" y="319.5" >codech::cod..</text>
</g>
<g >
<title>get_page_from_freelist (28 samples, 0.01%)</title><rect x="321.0" y="37" width="0.1" height="15.0" fill="rgb(214,209,8)" rx="2" ry="2" />
<text  x="324.03" y="47.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (25 samples, 0.01%)</title><rect x="322.0" y="165" width="0.1" height="15.0" fill="rgb(214,40,52)" rx="2" ry="2" />
<text  x="325.02" y="175.5" ></text>
</g>
<g >
<title>core::ptr::slice_from_raw_parts (12,179 samples, 4.22%)</title><rect x="871.0" y="309" width="49.8" height="15.0" fill="rgb(207,47,4)" rx="2" ry="2" />
<text  x="873.96" y="319.5" >core:..</text>
</g>
<g >
<title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (10,764 samples, 3.73%)</title><rect x="588.3" y="309" width="44.0" height="15.0" fill="rgb(253,114,21)" rx="2" ry="2" />
<text  x="591.29" y="319.5" >core..</text>
</g>
<g >
<title>sys_write (276 samples, 0.10%)</title><rect x="317.4" y="245" width="1.2" height="15.0" fill="rgb(208,57,20)" rx="2" ry="2" />
<text  x="320.43" y="255.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::len (18,405 samples, 6.38%)</title><rect x="989.8" y="309" width="75.3" height="15.0" fill="rgb(229,103,23)" rx="2" ry="2" />
<text  x="992.84" y="319.5" >core::sl..</text>
</g>
<g >
<title>clear_page_erms (71 samples, 0.02%)</title><rect x="320.7" y="37" width="0.3" height="15.0" fill="rgb(227,59,31)" rx="2" ry="2" />
<text  x="323.74" y="47.5" ></text>
</g>
<g >
<title>vfs_write (276 samples, 0.10%)</title><rect x="317.4" y="229" width="1.2" height="15.0" fill="rgb(214,86,30)" rx="2" ry="2" />
<text  x="320.43" y="239.5" ></text>
</g>
<g >
<title>arch_tlb_finish_mmu (26 samples, 0.01%)</title><rect x="322.0" y="181" width="0.1" height="15.0" fill="rgb(238,214,50)" rx="2" ry="2" />
<text  x="325.02" y="191.5" ></text>
</g>
<g >
<title>__handle_mm_fault (250 samples, 0.09%)</title><rect x="952.4" y="229" width="1.0" height="15.0" fill="rgb(226,24,41)" rx="2" ry="2" />
<text  x="955.38" y="239.5" ></text>
</g>
<g >
<title>do_munmap (101 samples, 0.03%)</title><rect x="322.0" y="229" width="0.4" height="15.0" fill="rgb(253,26,39)" rx="2" ry="2" />
<text  x="325.02" y="239.5" ></text>
</g>
<g >
<title>mark_page_accessed (54 samples, 0.02%)</title><rect x="321.6" y="181" width="0.2" height="15.0" fill="rgb(244,210,6)" rx="2" ry="2" />
<text  x="324.62" y="191.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::split_at (10,784 samples, 3.74%)</title><rect x="1065.1" y="309" width="44.1" height="15.0" fill="rgb(241,123,53)" rx="2" ry="2" />
<text  x="1068.09" y="319.5" >core..</text>
</g>
<g >
<title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (10,522 samples, 3.65%)</title><rect x="1109.2" y="309" width="43.0" height="15.0" fill="rgb(221,190,8)" rx="2" ry="2" />
<text  x="1112.19" y="319.5" >core..</text>
</g>
<g >
<title>shmem_file_read_iter (771 samples, 0.27%)</title><rect x="318.8" y="197" width="3.2" height="15.0" fill="rgb(234,102,48)" rx="2" ry="2" />
<text  x="321.81" y="207.5" ></text>
</g>
<g >
<title>core::cmp::Ord::min (3,146 samples, 1.09%)</title><rect x="575.4" y="309" width="12.9" height="15.0" fill="rgb(225,102,23)" rx="2" ry="2" />
<text  x="578.43" y="319.5" ></text>
</g>
<g >
<title>futex_wait (56 samples, 0.02%)</title><rect x="318.6" y="213" width="0.2" height="15.0" fill="rgb(247,0,4)" rx="2" ry="2" />
<text  x="321.57" y="223.5" ></text>
</g>
<g >
<title>handle_mm_fault (215 samples, 0.07%)</title><rect x="320.6" y="101" width="0.8" height="15.0" fill="rgb(245,121,37)" rx="2" ry="2" />
<text  x="323.56" y="111.5" ></text>
</g>
<g >
<title>sys_futex (56 samples, 0.02%)</title><rect x="318.6" y="245" width="0.2" height="15.0" fill="rgb(225,178,35)" rx="2" ry="2" />
<text  x="321.57" y="255.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (57 samples, 0.02%)</title><rect x="318.6" y="277" width="0.2" height="15.0" fill="rgb(231,13,3)" rx="2" ry="2" />
<text  x="321.57" y="287.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (49 samples, 0.02%)</title><rect x="322.2" y="149" width="0.2" height="15.0" fill="rgb(206,177,0)" rx="2" ry="2" />
<text  x="325.23" y="159.5" ></text>
</g>
<g >
<title>native_write_msr (53 samples, 0.02%)</title><rect x="317.2" y="133" width="0.2" height="15.0" fill="rgb(227,133,49)" rx="2" ry="2" />
<text  x="320.18" y="143.5" ></text>
</g>
<g >
<title>new_sync_write (276 samples, 0.10%)</title><rect x="317.4" y="197" width="1.2" height="15.0" fill="rgb(210,3,48)" rx="2" ry="2" />
<text  x="320.43" y="207.5" ></text>
</g>
<g >
<title>generic_file_write_iter (276 samples, 0.10%)</title><rect x="317.4" y="181" width="1.2" height="15.0" fill="rgb(240,224,22)" rx="2" ry="2" />
<text  x="320.43" y="191.5" ></text>
</g>
<g >
<title>sys_munmap (101 samples, 0.03%)</title><rect x="322.0" y="261" width="0.4" height="15.0" fill="rgb(247,86,13)" rx="2" ry="2" />
<text  x="325.02" y="271.5" ></text>
</g>
<g >
<title>__libc_write (276 samples, 0.10%)</title><rect x="317.4" y="293" width="1.2" height="15.0" fill="rgb(236,180,32)" rx="2" ry="2" />
<text  x="320.43" y="303.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (772 samples, 0.27%)</title><rect x="318.8" y="293" width="3.2" height="15.0" fill="rgb(236,3,47)" rx="2" ry="2" />
<text  x="321.81" y="303.5" ></text>
</g>
<g >
<title>core::cmp::min (3,420 samples, 1.19%)</title><rect x="632.3" y="309" width="14.0" height="15.0" fill="rgb(245,19,40)" rx="2" ry="2" />
<text  x="635.31" y="319.5" ></text>
</g>
<g >
<title>alloc_pages_vma (110 samples, 0.04%)</title><rect x="320.7" y="69" width="0.5" height="15.0" fill="rgb(230,49,23)" rx="2" ry="2" />
<text  x="323.72" y="79.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (30 samples, 0.01%)</title><rect x="1064.9" y="277" width="0.1" height="15.0" fill="rgb(213,8,29)" rx="2" ry="2" />
<text  x="1067.93" y="287.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (36 samples, 0.01%)</title><rect x="953.1" y="181" width="0.1" height="15.0" fill="rgb(235,195,50)" rx="2" ry="2" />
<text  x="956.09" y="191.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (53 samples, 0.02%)</title><rect x="318.6" y="133" width="0.2" height="15.0" fill="rgb(254,197,20)" rx="2" ry="2" />
<text  x="321.58" y="143.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (49 samples, 0.02%)</title><rect x="322.2" y="133" width="0.2" height="15.0" fill="rgb(234,185,0)" rx="2" ry="2" />
<text  x="325.23" y="143.5" ></text>
</g>
<g >
<title>__do_page_fault (311 samples, 0.11%)</title><rect x="952.2" y="261" width="1.3" height="15.0" fill="rgb(211,51,31)" rx="2" ry="2" />
<text  x="955.22" y="271.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (9,917 samples, 3.44%)</title><rect x="179.8" y="309" width="40.6" height="15.0" fill="rgb(207,201,23)" rx="2" ry="2" />
<text  x="182.82" y="319.5" >&lt;co..</text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::is_empty (5,071 samples, 1.76%)</title><rect x="969.1" y="309" width="20.7" height="15.0" fill="rgb(227,153,21)" rx="2" ry="2" />
<text  x="972.11" y="319.5" ></text>
</g>
<g >
<title>core::ptr::&lt;impl *mut T&gt;::offset (4,890 samples, 1.69%)</title><rect x="850.9" y="309" width="20.0" height="15.0" fill="rgb(222,55,53)" rx="2" ry="2" />
<text  x="853.92" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (101 samples, 0.03%)</title><rect x="322.0" y="277" width="0.4" height="15.0" fill="rgb(209,158,53)" rx="2" ry="2" />
<text  x="325.02" y="287.5" ></text>
</g>
<g >
<title>x86_pmu_enable (68 samples, 0.02%)</title><rect x="317.1" y="181" width="0.3" height="15.0" fill="rgb(215,65,28)" rx="2" ry="2" />
<text  x="320.13" y="191.5" ></text>
</g>
<g >
<title>core::cmp::min_by (14,815 samples, 5.13%)</title><rect x="646.3" y="309" width="60.6" height="15.0" fill="rgb(254,192,31)" rx="2" ry="2" />
<text  x="649.29" y="319.5" >core::..</text>
</g>
<g >
<title>__schedule (55 samples, 0.02%)</title><rect x="318.6" y="165" width="0.2" height="15.0" fill="rgb(205,144,4)" rx="2" ry="2" />
<text  x="321.58" y="175.5" ></text>
</g>
<g >
<title>do_page_fault (314 samples, 0.11%)</title><rect x="952.2" y="277" width="1.3" height="15.0" fill="rgb(207,201,38)" rx="2" ry="2" />
<text  x="955.21" y="287.5" ></text>
</g>
<g >
<title>shmem_getpage_gfp (98 samples, 0.03%)</title><rect x="318.0" y="117" width="0.4" height="15.0" fill="rgb(225,164,31)" rx="2" ry="2" />
<text  x="321.03" y="127.5" ></text>
</g>
<g >
<title>unmap_page_range (73 samples, 0.03%)</title><rect x="322.1" y="165" width="0.3" height="15.0" fill="rgb(226,14,28)" rx="2" ry="2" />
<text  x="325.13" y="175.5" ></text>
</g>
<g >
<title>native_irq_return_iret (40 samples, 0.01%)</title><rect x="952.0" y="293" width="0.2" height="15.0" fill="rgb(206,154,32)" rx="2" ry="2" />
<text  x="955.04" y="303.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (101 samples, 0.03%)</title><rect x="322.0" y="293" width="0.4" height="15.0" fill="rgb(211,121,50)" rx="2" ry="2" />
<text  x="325.02" y="303.5" ></text>
</g>
<g >
<title>codech (288,592 samples, 100.00%)</title><rect x="10.0" y="325" width="1180.0" height="15.0" fill="rgb(247,196,52)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >codech</text>
</g>
<g >
<title>[unknown] (415 samples, 0.14%)</title><rect x="317.1" y="309" width="1.7" height="15.0" fill="rgb(209,38,17)" rx="2" ry="2" />
<text  x="320.11" y="319.5" ></text>
</g>
</g>
</svg>
