<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="390.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="373" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="373" > </text>
<g id="frames">
<g >
<title>alloc_pages_vma (58 samples, 0.04%)</title><rect x="109.7" y="69" width="0.4" height="15.0" fill="rgb(237,106,12)" rx="2" ry="2" />
<text  x="112.70" y="79.5" ></text>
</g>
<g >
<title>page_fault (129 samples, 0.08%)</title><rect x="109.5" y="149" width="0.9" height="15.0" fill="rgb(223,75,28)" rx="2" ry="2" />
<text  x="112.46" y="159.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (15 samples, 0.01%)</title><rect x="594.2" y="277" width="0.1" height="15.0" fill="rgb(218,159,49)" rx="2" ry="2" />
<text  x="597.16" y="287.5" ></text>
</g>
<g >
<title>free_unref_page_list (27 samples, 0.02%)</title><rect x="111.8" y="101" width="0.2" height="15.0" fill="rgb(211,2,8)" rx="2" ry="2" />
<text  x="114.81" y="111.5" ></text>
</g>
<g >
<title>vfs_write (632 samples, 0.40%)</title><rect x="102.8" y="229" width="4.7" height="15.0" fill="rgb(238,209,45)" rx="2" ry="2" />
<text  x="105.76" y="239.5" ></text>
</g>
<g >
<title>[unknown] (79 samples, 0.05%)</title><rect x="102.2" y="293" width="0.6" height="15.0" fill="rgb(217,139,53)" rx="2" ry="2" />
<text  x="105.16" y="303.5" ></text>
</g>
<g >
<title>try_charge (37 samples, 0.02%)</title><rect x="1183.7" y="197" width="0.3" height="15.0" fill="rgb(218,204,54)" rx="2" ry="2" />
<text  x="1186.70" y="207.5" ></text>
</g>
<g >
<title>__activate_page (14 samples, 0.01%)</title><rect x="110.7" y="133" width="0.1" height="15.0" fill="rgb(220,30,36)" rx="2" ry="2" />
<text  x="113.74" y="143.5" ></text>
</g>
<g >
<title>ret_from_fork (68 samples, 0.04%)</title><rect x="102.2" y="245" width="0.6" height="15.0" fill="rgb(219,153,7)" rx="2" ry="2" />
<text  x="105.24" y="255.5" ></text>
</g>
<g >
<title>down_read_trylock (18 samples, 0.01%)</title><rect x="1180.0" y="245" width="0.2" height="15.0" fill="rgb(218,125,53)" rx="2" ry="2" />
<text  x="1183.03" y="255.5" ></text>
</g>
<g >
<title>schedule_tail (68 samples, 0.04%)</title><rect x="102.2" y="229" width="0.6" height="15.0" fill="rgb(223,44,24)" rx="2" ry="2" />
<text  x="105.24" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (23 samples, 0.01%)</title><rect x="1187.0" y="261" width="0.2" height="15.0" fill="rgb(243,107,48)" rx="2" ry="2" />
<text  x="1190.01" y="271.5" ></text>
</g>
<g >
<title>shmem_alloc_page (59 samples, 0.04%)</title><rect x="106.6" y="85" width="0.4" height="15.0" fill="rgb(211,210,2)" rx="2" ry="2" />
<text  x="109.60" y="95.5" ></text>
</g>
<g >
<title>page_add_new_anon_rmap (17 samples, 0.01%)</title><rect x="1184.0" y="213" width="0.1" height="15.0" fill="rgb(206,221,19)" rx="2" ry="2" />
<text  x="1186.97" y="223.5" ></text>
</g>
<g >
<title>__do_page_fault (128 samples, 0.08%)</title><rect x="109.5" y="117" width="0.9" height="15.0" fill="rgb(248,32,52)" rx="2" ry="2" />
<text  x="112.47" y="127.5" ></text>
</g>
<g >
<title>__sched_yield (28 samples, 0.02%)</title><rect x="1187.0" y="293" width="0.2" height="15.0" fill="rgb(245,55,45)" rx="2" ry="2" />
<text  x="1189.98" y="303.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4,832 samples, 3.09%)</title><rect x="112.1" y="309" width="36.5" height="15.0" fill="rgb(254,128,4)" rx="2" ry="2" />
<text  x="115.12" y="319.5" >all..</text>
</g>
<g >
<title>release_pages (64 samples, 0.04%)</title><rect x="111.6" y="117" width="0.5" height="15.0" fill="rgb(231,196,15)" rx="2" ry="2" />
<text  x="114.58" y="127.5" ></text>
</g>
<g >
<title>finish_task_switch (21 samples, 0.01%)</title><rect x="107.6" y="149" width="0.1" height="15.0" fill="rgb(215,115,5)" rx="2" ry="2" />
<text  x="110.56" y="159.5" ></text>
</g>
<g >
<title>shmem_add_to_page_cache (27 samples, 0.02%)</title><rect x="106.1" y="101" width="0.2" height="15.0" fill="rgb(205,4,49)" rx="2" ry="2" />
<text  x="109.14" y="111.5" ></text>
</g>
<g >
<title>__libc_write (632 samples, 0.40%)</title><rect x="102.8" y="293" width="4.7" height="15.0" fill="rgb(205,63,47)" rx="2" ry="2" />
<text  x="105.76" y="303.5" ></text>
</g>
<g >
<title>__handle_mm_fault (493 samples, 0.32%)</title><rect x="1180.5" y="229" width="3.7" height="15.0" fill="rgb(237,9,37)" rx="2" ry="2" />
<text  x="1183.48" y="239.5" ></text>
</g>
<g >
<title>lru_cache_add_anon (32 samples, 0.02%)</title><rect x="105.7" y="101" width="0.3" height="15.0" fill="rgb(230,193,39)" rx="2" ry="2" />
<text  x="108.74" y="111.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (16 samples, 0.01%)</title><rect x="763.2" y="293" width="0.1" height="15.0" fill="rgb(234,112,39)" rx="2" ry="2" />
<text  x="766.17" y="303.5" ></text>
</g>
<g >
<title>free_pcppages_bulk (14 samples, 0.01%)</title><rect x="111.9" y="69" width="0.1" height="15.0" fill="rgb(249,57,7)" rx="2" ry="2" />
<text  x="114.89" y="79.5" ></text>
</g>
<g >
<title>core::ptr::&lt;impl *mut T&gt;::offset (13,710 samples, 8.76%)</title><rect x="976.6" y="309" width="103.4" height="15.0" fill="rgb(225,191,52)" rx="2" ry="2" />
<text  x="979.58" y="319.5" >core::ptr::&lt;..</text>
</g>
<g >
<title>rayon_core::registry::ThreadBuilder::run (428 samples, 0.27%)</title><rect x="1186.7" y="309" width="3.2" height="15.0" fill="rgb(205,92,33)" rx="2" ry="2" />
<text  x="1189.67" y="319.5" ></text>
</g>
<g >
<title>handle_mm_fault (535 samples, 0.34%)</title><rect x="1180.3" y="245" width="4.0" height="15.0" fill="rgb(240,63,16)" rx="2" ry="2" />
<text  x="1183.27" y="255.5" ></text>
</g>
<g >
<title>native_irq_return_iret (23 samples, 0.01%)</title><rect x="110.5" y="165" width="0.1" height="15.0" fill="rgb(207,26,14)" rx="2" ry="2" />
<text  x="113.46" y="175.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (65 samples, 0.04%)</title><rect x="102.3" y="165" width="0.4" height="15.0" fill="rgb(205,228,31)" rx="2" ry="2" />
<text  x="105.26" y="175.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (72 samples, 0.05%)</title><rect x="111.5" y="149" width="0.6" height="15.0" fill="rgb(230,31,36)" rx="2" ry="2" />
<text  x="114.52" y="159.5" ></text>
</g>
<g >
<title>__lru_cache_add (14 samples, 0.01%)</title><rect x="110.2" y="53" width="0.1" height="15.0" fill="rgb(248,206,4)" rx="2" ry="2" />
<text  x="113.16" y="63.5" ></text>
</g>
<g >
<title>vm_munmap (117 samples, 0.07%)</title><rect x="111.2" y="245" width="0.9" height="15.0" fill="rgb(222,195,26)" rx="2" ry="2" />
<text  x="114.18" y="255.5" ></text>
</g>
<g >
<title>mark_page_accessed (32 samples, 0.02%)</title><rect x="110.7" y="181" width="0.2" height="15.0" fill="rgb(241,103,23)" rx="2" ry="2" />
<text  x="113.65" y="191.5" ></text>
</g>
<g >
<title>sys_futex (21 samples, 0.01%)</title><rect x="107.6" y="245" width="0.1" height="15.0" fill="rgb(215,98,54)" rx="2" ry="2" />
<text  x="110.56" y="255.5" ></text>
</g>
<g >
<title>sync_regs (50 samples, 0.03%)</title><rect x="1179.0" y="277" width="0.4" height="15.0" fill="rgb(208,38,33)" rx="2" ry="2" />
<text  x="1182.00" y="287.5" ></text>
</g>
<g >
<title>copy_page_to_iter (381 samples, 0.24%)</title><rect x="107.8" y="181" width="2.9" height="15.0" fill="rgb(233,35,27)" rx="2" ry="2" />
<text  x="110.78" y="191.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (23 samples, 0.01%)</title><rect x="107.5" y="277" width="0.2" height="15.0" fill="rgb(221,63,34)" rx="2" ry="2" />
<text  x="110.55" y="287.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (16 samples, 0.01%)</title><rect x="111.2" y="197" width="0.1" height="15.0" fill="rgb(246,47,1)" rx="2" ry="2" />
<text  x="114.18" y="207.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (51 samples, 0.03%)</title><rect x="1183.1" y="181" width="0.4" height="15.0" fill="rgb(210,107,46)" rx="2" ry="2" />
<text  x="1186.12" y="191.5" ></text>
</g>
<g >
<title>do_page_fault (608 samples, 0.39%)</title><rect x="1179.9" y="277" width="4.6" height="15.0" fill="rgb(219,170,9)" rx="2" ry="2" />
<text  x="1182.89" y="287.5" ></text>
</g>
<g >
<title>codech::codec::encode (25,559 samples, 16.33%)</title><rect x="401.7" y="309" width="192.7" height="15.0" fill="rgb(249,119,6)" rx="2" ry="2" />
<text  x="404.69" y="319.5" >codech::codec::encode</text>
</g>
<g >
<title>mem_cgroup_try_charge (55 samples, 0.04%)</title><rect x="1183.6" y="213" width="0.4" height="15.0" fill="rgb(226,58,3)" rx="2" ry="2" />
<text  x="1186.56" y="223.5" ></text>
</g>
<g >
<title>alloc_pages_vma (51 samples, 0.03%)</title><rect x="106.6" y="69" width="0.4" height="15.0" fill="rgb(250,203,37)" rx="2" ry="2" />
<text  x="109.65" y="79.5" ></text>
</g>
<g >
<title>x86_pmu_enable (66 samples, 0.04%)</title><rect x="102.3" y="181" width="0.4" height="15.0" fill="rgb(209,174,27)" rx="2" ry="2" />
<text  x="105.25" y="191.5" ></text>
</g>
<g >
<title>sys_write (632 samples, 0.40%)</title><rect x="102.8" y="245" width="4.7" height="15.0" fill="rgb(253,200,32)" rx="2" ry="2" />
<text  x="105.76" y="255.5" ></text>
</g>
<g >
<title>iov_iter_fault_in_readable (86 samples, 0.05%)</title><rect x="104.7" y="133" width="0.7" height="15.0" fill="rgb(229,86,39)" rx="2" ry="2" />
<text  x="107.72" y="143.5" ></text>
</g>
<g >
<title>free_unref_page_commit (19 samples, 0.01%)</title><rect x="111.9" y="85" width="0.1" height="15.0" fill="rgb(246,134,42)" rx="2" ry="2" />
<text  x="114.85" y="95.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (243 samples, 0.16%)</title><rect x="102.9" y="117" width="1.8" height="15.0" fill="rgb(223,197,48)" rx="2" ry="2" />
<text  x="105.89" y="127.5" ></text>
</g>
<g >
<title>__pagevec_lru_add_fn (35 samples, 0.02%)</title><rect x="1183.2" y="165" width="0.3" height="15.0" fill="rgb(221,203,7)" rx="2" ry="2" />
<text  x="1186.21" y="175.5" ></text>
</g>
<g >
<title>unmap_vmas (101 samples, 0.06%)</title><rect x="111.3" y="197" width="0.8" height="15.0" fill="rgb(219,16,28)" rx="2" ry="2" />
<text  x="114.30" y="207.5" ></text>
</g>
<g >
<title>release_pages (16 samples, 0.01%)</title><rect x="111.2" y="133" width="0.1" height="15.0" fill="rgb(252,38,10)" rx="2" ry="2" />
<text  x="114.18" y="143.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (14 samples, 0.01%)</title><rect x="1187.8" y="293" width="0.1" height="15.0" fill="rgb(213,117,18)" rx="2" ry="2" />
<text  x="1190.77" y="303.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (15 samples, 0.01%)</title><rect x="594.2" y="293" width="0.1" height="15.0" fill="rgb(221,75,1)" rx="2" ry="2" />
<text  x="597.16" y="303.5" ></text>
</g>
<g >
<title>[unknown] (739 samples, 0.47%)</title><rect x="102.1" y="309" width="5.6" height="15.0" fill="rgb(242,42,42)" rx="2" ry="2" />
<text  x="105.15" y="319.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (224 samples, 0.14%)</title><rect x="1181.2" y="197" width="1.7" height="15.0" fill="rgb(222,113,50)" rx="2" ry="2" />
<text  x="1184.17" y="207.5" ></text>
</g>
<g >
<title>new_sync_read (445 samples, 0.28%)</title><rect x="107.7" y="213" width="3.4" height="15.0" fill="rgb(233,109,36)" rx="2" ry="2" />
<text  x="110.73" y="223.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (18 samples, 0.01%)</title><rect x="401.3" y="277" width="0.1" height="15.0" fill="rgb(237,35,50)" rx="2" ry="2" />
<text  x="404.31" y="287.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (24 samples, 0.02%)</title><rect x="1187.0" y="277" width="0.2" height="15.0" fill="rgb(246,52,20)" rx="2" ry="2" />
<text  x="1190.00" y="287.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (445 samples, 0.28%)</title><rect x="107.7" y="293" width="3.4" height="15.0" fill="rgb(229,79,25)" rx="2" ry="2" />
<text  x="110.73" y="303.5" ></text>
</g>
<g >
<title>shmem_getpage_gfp (20 samples, 0.01%)</title><rect x="110.9" y="181" width="0.2" height="15.0" fill="rgb(214,196,14)" rx="2" ry="2" />
<text  x="113.90" y="191.5" ></text>
</g>
<g >
<title>__libc_read (446 samples, 0.29%)</title><rect x="107.7" y="309" width="3.4" height="15.0" fill="rgb(221,52,9)" rx="2" ry="2" />
<text  x="110.73" y="319.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (24 samples, 0.02%)</title><rect x="762.9" y="293" width="0.2" height="15.0" fill="rgb(244,226,48)" rx="2" ry="2" />
<text  x="765.88" y="303.5" ></text>
</g>
<g >
<title>arch_tlb_finish_mmu (16 samples, 0.01%)</title><rect x="111.2" y="181" width="0.1" height="15.0" fill="rgb(243,214,54)" rx="2" ry="2" />
<text  x="114.18" y="191.5" ></text>
</g>
<g >
<title>vfs_read (445 samples, 0.28%)</title><rect x="107.7" y="245" width="3.4" height="15.0" fill="rgb(234,7,38)" rx="2" ry="2" />
<text  x="110.73" y="255.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (19 samples, 0.01%)</title><rect x="401.3" y="293" width="0.1" height="15.0" fill="rgb(242,169,52)" rx="2" ry="2" />
<text  x="404.30" y="303.5" ></text>
</g>
<g >
<title>shmem_write_end (45 samples, 0.03%)</title><rect x="107.1" y="133" width="0.3" height="15.0" fill="rgb(232,149,26)" rx="2" ry="2" />
<text  x="110.06" y="143.5" ></text>
</g>
<g >
<title>page_fault (610 samples, 0.39%)</title><rect x="1179.9" y="293" width="4.6" height="15.0" fill="rgb(254,195,28)" rx="2" ry="2" />
<text  x="1182.87" y="303.5" ></text>
</g>
<g >
<title>do_munmap (117 samples, 0.07%)</title><rect x="111.2" y="229" width="0.9" height="15.0" fill="rgb(233,168,24)" rx="2" ry="2" />
<text  x="114.18" y="239.5" ></text>
</g>
<g >
<title>radix_tree_lookup_slot (15 samples, 0.01%)</title><rect x="105.6" y="69" width="0.1" height="15.0" fill="rgb(226,130,44)" rx="2" ry="2" />
<text  x="108.62" y="79.5" ></text>
</g>
<g >
<title>__do_page_fault (599 samples, 0.38%)</title><rect x="1179.9" y="261" width="4.5" height="15.0" fill="rgb(230,185,22)" rx="2" ry="2" />
<text  x="1182.91" y="271.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (24 samples, 0.02%)</title><rect x="762.9" y="277" width="0.2" height="15.0" fill="rgb(233,83,15)" rx="2" ry="2" />
<text  x="765.88" y="287.5" ></text>
</g>
<g >
<title>pthread_cond_wait@@GLIBC_2.3.2 (23 samples, 0.01%)</title><rect x="107.5" y="293" width="0.2" height="15.0" fill="rgb(225,89,5)" rx="2" ry="2" />
<text  x="110.55" y="303.5" ></text>
</g>
<g >
<title>__generic_file_write_iter (631 samples, 0.40%)</title><rect x="102.8" y="165" width="4.7" height="15.0" fill="rgb(226,172,34)" rx="2" ry="2" />
<text  x="105.76" y="175.5" ></text>
</g>
<g >
<title>futex_wait_queue_me (21 samples, 0.01%)</title><rect x="107.6" y="197" width="0.1" height="15.0" fill="rgb(232,148,3)" rx="2" ry="2" />
<text  x="110.56" y="207.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (46 samples, 0.03%)</title><rect x="106.7" y="53" width="0.3" height="15.0" fill="rgb(234,184,39)" rx="2" ry="2" />
<text  x="109.66" y="63.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (16 samples, 0.01%)</title><rect x="111.2" y="149" width="0.1" height="15.0" fill="rgb(245,4,15)" rx="2" ry="2" />
<text  x="114.18" y="159.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (15 samples, 0.01%)</title><rect x="763.2" y="277" width="0.1" height="15.0" fill="rgb(220,57,48)" rx="2" ry="2" />
<text  x="766.17" y="287.5" ></text>
</g>
<g >
<title>unmap_region (117 samples, 0.07%)</title><rect x="111.2" y="213" width="0.9" height="15.0" fill="rgb(217,22,0)" rx="2" ry="2" />
<text  x="114.18" y="223.5" ></text>
</g>
<g >
<title>generic_perform_write (612 samples, 0.39%)</title><rect x="102.8" y="149" width="4.6" height="15.0" fill="rgb(228,17,15)" rx="2" ry="2" />
<text  x="105.79" y="159.5" ></text>
</g>
<g >
<title>shmem_write_begin (225 samples, 0.14%)</title><rect x="105.4" y="133" width="1.7" height="15.0" fill="rgb(238,68,27)" rx="2" ry="2" />
<text  x="108.37" y="143.5" ></text>
</g>
<g >
<title>shmem_getpage_gfp (222 samples, 0.14%)</title><rect x="105.4" y="117" width="1.7" height="15.0" fill="rgb(230,149,45)" rx="2" ry="2" />
<text  x="108.39" y="127.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (351 samples, 0.22%)</title><rect x="107.8" y="165" width="2.6" height="15.0" fill="rgb(231,175,50)" rx="2" ry="2" />
<text  x="110.79" y="175.5" ></text>
</g>
<g >
<title>codech (156,467 samples, 100.00%)</title><rect x="10.0" y="325" width="1180.0" height="15.0" fill="rgb(221,47,23)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >codech</text>
</g>
<g >
<title>find_lock_entry (20 samples, 0.01%)</title><rect x="105.6" y="101" width="0.1" height="15.0" fill="rgb(208,90,0)" rx="2" ry="2" />
<text  x="108.59" y="111.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (188 samples, 0.12%)</title><rect x="1185.0" y="277" width="1.4" height="15.0" fill="rgb(236,24,7)" rx="2" ry="2" />
<text  x="1187.96" y="287.5" ></text>
</g>
<g >
<title>native_irq_return_iret (62 samples, 0.04%)</title><rect x="1179.4" y="293" width="0.5" height="15.0" fill="rgb(230,222,35)" rx="2" ry="2" />
<text  x="1182.40" y="303.5" ></text>
</g>
<g >
<title>core::ptr::swap_nonoverlapping_one (18 samples, 0.01%)</title><rect x="1188.6" y="293" width="0.1" height="15.0" fill="rgb(226,165,36)" rx="2" ry="2" />
<text  x="1191.57" y="303.5" ></text>
</g>
<g >
<title>find_vma (14 samples, 0.01%)</title><rect x="1180.2" y="245" width="0.1" height="15.0" fill="rgb(251,32,38)" rx="2" ry="2" />
<text  x="1183.17" y="255.5" ></text>
</g>
<g >
<title>all (156,473 samples, 100%)</title><rect x="10.0" y="341" width="1180.0" height="15.0" fill="rgb(232,71,14)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (445 samples, 0.28%)</title><rect x="107.7" y="277" width="3.4" height="15.0" fill="rgb(210,99,22)" rx="2" ry="2" />
<text  x="110.73" y="287.5" ></text>
</g>
<g >
<title>do_futex (21 samples, 0.01%)</title><rect x="107.6" y="229" width="0.1" height="15.0" fill="rgb(225,1,34)" rx="2" ry="2" />
<text  x="110.56" y="239.5" ></text>
</g>
<g >
<title>find_get_entry (17 samples, 0.01%)</title><rect x="105.6" y="85" width="0.1" height="15.0" fill="rgb(212,145,39)" rx="2" ry="2" />
<text  x="108.60" y="95.5" ></text>
</g>
<g >
<title>__pagevec_lru_add_fn (19 samples, 0.01%)</title><rect x="105.8" y="53" width="0.2" height="15.0" fill="rgb(252,156,14)" rx="2" ry="2" />
<text  x="108.83" y="63.5" ></text>
</g>
<g >
<title>codech::matrix::Matrix::encode (22,390 samples, 14.31%)</title><rect x="594.4" y="309" width="168.9" height="15.0" fill="rgb(225,74,27)" rx="2" ry="2" />
<text  x="597.44" y="319.5" >codech::matrix::Matri..</text>
</g>
<g >
<title>sys_munmap (117 samples, 0.07%)</title><rect x="111.2" y="261" width="0.9" height="15.0" fill="rgb(217,19,54)" rx="2" ry="2" />
<text  x="114.18" y="271.5" ></text>
</g>
<g >
<title>core::ptr::read (18 samples, 0.01%)</title><rect x="1188.4" y="293" width="0.2" height="15.0" fill="rgb(210,193,53)" rx="2" ry="2" />
<text  x="1191.43" y="303.5" ></text>
</g>
<g >
<title>futex_wait (21 samples, 0.01%)</title><rect x="107.6" y="213" width="0.1" height="15.0" fill="rgb(228,179,22)" rx="2" ry="2" />
<text  x="110.56" y="223.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (16 samples, 0.01%)</title><rect x="111.2" y="165" width="0.1" height="15.0" fill="rgb(239,23,36)" rx="2" ry="2" />
<text  x="114.18" y="175.5" ></text>
</g>
<g >
<title>shmem_file_read_iter (444 samples, 0.28%)</title><rect x="107.7" y="197" width="3.4" height="15.0" fill="rgb(236,171,13)" rx="2" ry="2" />
<text  x="110.73" y="207.5" ></text>
</g>
<g >
<title>native_write_msr (14 samples, 0.01%)</title><rect x="107.6" y="69" width="0.1" height="15.0" fill="rgb(206,123,52)" rx="2" ry="2" />
<text  x="110.60" y="79.5" ></text>
</g>
<g >
<title>__vfs_read (445 samples, 0.28%)</title><rect x="107.7" y="229" width="3.4" height="15.0" fill="rgb(226,80,47)" rx="2" ry="2" />
<text  x="110.73" y="239.5" ></text>
</g>
<g >
<title>core::ptr::&lt;impl *mut T&gt;::add (8,698 samples, 5.56%)</title><rect x="848.4" y="309" width="65.6" height="15.0" fill="rgb(227,79,43)" rx="2" ry="2" />
<text  x="851.42" y="319.5" >core::p..</text>
</g>
<g >
<title>do_page_fault (129 samples, 0.08%)</title><rect x="109.5" y="133" width="0.9" height="15.0" fill="rgb(244,12,48)" rx="2" ry="2" />
<text  x="112.46" y="143.5" ></text>
</g>
<g >
<title>shmem_alloc_and_acct_page (92 samples, 0.06%)</title><rect x="106.3" y="101" width="0.7" height="15.0" fill="rgb(217,152,26)" rx="2" ry="2" />
<text  x="109.35" y="111.5" ></text>
</g>
<g >
<title>do_syscall_64 (117 samples, 0.07%)</title><rect x="111.2" y="277" width="0.9" height="15.0" fill="rgb(205,23,31)" rx="2" ry="2" />
<text  x="114.18" y="287.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (72 samples, 0.05%)</title><rect x="111.5" y="133" width="0.6" height="15.0" fill="rgb(254,131,47)" rx="2" ry="2" />
<text  x="114.52" y="143.5" ></text>
</g>
<g >
<title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12,206 samples, 7.80%)</title><rect x="10.1" y="309" width="92.0" height="15.0" fill="rgb(205,4,45)" rx="2" ry="2" />
<text  x="13.05" y="319.5" >&lt;core::slic..</text>
</g>
<g >
<title>schedule (21 samples, 0.01%)</title><rect x="107.6" y="181" width="0.1" height="15.0" fill="rgb(221,133,37)" rx="2" ry="2" />
<text  x="110.56" y="191.5" ></text>
</g>
<g >
<title>__handle_mm_fault (117 samples, 0.07%)</title><rect x="109.5" y="85" width="0.9" height="15.0" fill="rgb(229,136,2)" rx="2" ry="2" />
<text  x="112.53" y="95.5" ></text>
</g>
<g >
<title>handle_mm_fault (121 samples, 0.08%)</title><rect x="109.5" y="101" width="0.9" height="15.0" fill="rgb(216,98,47)" rx="2" ry="2" />
<text  x="112.51" y="111.5" ></text>
</g>
<g >
<title>__vfs_write (631 samples, 0.40%)</title><rect x="102.8" y="213" width="4.7" height="15.0" fill="rgb(212,150,36)" rx="2" ry="2" />
<text  x="105.76" y="223.5" ></text>
</g>
<g >
<title>std::sys::unix::thread::Thread::new (72 samples, 0.05%)</title><rect x="102.2" y="277" width="0.6" height="15.0" fill="rgb(234,161,31)" rx="2" ry="2" />
<text  x="105.21" y="287.5" ></text>
</g>
<g >
<title>get_page_from_freelist (36 samples, 0.02%)</title><rect x="106.7" y="37" width="0.3" height="15.0" fill="rgb(250,25,28)" rx="2" ry="2" />
<text  x="109.74" y="47.5" ></text>
</g>
<g >
<title>sys_read (445 samples, 0.28%)</title><rect x="107.7" y="261" width="3.4" height="15.0" fill="rgb(227,66,19)" rx="2" ry="2" />
<text  x="110.73" y="271.5" ></text>
</g>
<g >
<title>unmap_page_range (101 samples, 0.06%)</title><rect x="111.3" y="165" width="0.8" height="15.0" fill="rgb(220,25,12)" rx="2" ry="2" />
<text  x="114.30" y="175.5" ></text>
</g>
<g >
<title>core::ptr::&lt;impl *mut T&gt;::is_null (8,297 samples, 5.30%)</title><rect x="914.0" y="309" width="62.6" height="15.0" fill="rgb(239,207,51)" rx="2" ry="2" />
<text  x="917.01" y="319.5" >core::..</text>
</g>
<g >
<title>__perf_event_task_sched_in (21 samples, 0.01%)</title><rect x="107.6" y="133" width="0.1" height="15.0" fill="rgb(219,106,10)" rx="2" ry="2" />
<text  x="110.56" y="143.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (66 samples, 0.04%)</title><rect x="102.3" y="197" width="0.4" height="15.0" fill="rgb(249,143,33)" rx="2" ry="2" />
<text  x="105.25" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (632 samples, 0.40%)</title><rect x="102.8" y="277" width="4.7" height="15.0" fill="rgb(209,164,32)" rx="2" ry="2" />
<text  x="105.76" y="287.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (5,973 samples, 3.82%)</title><rect x="148.6" y="309" width="45.0" height="15.0" fill="rgb(218,73,54)" rx="2" ry="2" />
<text  x="151.58" y="319.5" >allo..</text>
</g>
<g >
<title>iov_iter_copy_from_user_atomic (247 samples, 0.16%)</title><rect x="102.9" y="133" width="1.8" height="15.0" fill="rgb(209,129,18)" rx="2" ry="2" />
<text  x="105.86" y="143.5" ></text>
</g>
<g >
<title>do_syscall_64 (23 samples, 0.01%)</title><rect x="107.5" y="261" width="0.2" height="15.0" fill="rgb(221,229,17)" rx="2" ry="2" />
<text  x="110.55" y="271.5" ></text>
</g>
<g >
<title>core::ptr::&lt;impl *const T&gt;::is_null (5,540 samples, 3.54%)</title><rect x="763.5" y="309" width="41.7" height="15.0" fill="rgb(212,62,35)" rx="2" ry="2" />
<text  x="766.45" y="319.5" >cor..</text>
</g>
<g >
<title>core::cell::UnsafeCell&lt;T&gt;::get (16 samples, 0.01%)</title><rect x="1187.4" y="293" width="0.1" height="15.0" fill="rgb(244,157,45)" rx="2" ry="2" />
<text  x="1190.42" y="303.5" ></text>
</g>
<g >
<title>core::ptr::write (12,250 samples, 7.83%)</title><rect x="1094.1" y="309" width="92.3" height="15.0" fill="rgb(230,201,12)" rx="2" ry="2" />
<text  x="1097.05" y="319.5" >core::ptr::..</text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (252 samples, 0.16%)</title><rect x="1184.5" y="293" width="1.9" height="15.0" fill="rgb(238,77,21)" rx="2" ry="2" />
<text  x="1187.48" y="303.5" ></text>
</g>
<g >
<title>__munmap (117 samples, 0.07%)</title><rect x="111.2" y="309" width="0.9" height="15.0" fill="rgb(220,139,5)" rx="2" ry="2" />
<text  x="114.18" y="319.5" ></text>
</g>
<g >
<title>activate_page (23 samples, 0.01%)</title><rect x="110.7" y="165" width="0.2" height="15.0" fill="rgb(231,36,19)" rx="2" ry="2" />
<text  x="113.72" y="175.5" ></text>
</g>
<g >
<title>get_page_from_freelist (82 samples, 0.05%)</title><rect x="1182.2" y="181" width="0.7" height="15.0" fill="rgb(236,163,22)" rx="2" ry="2" />
<text  x="1185.24" y="191.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (21 samples, 0.01%)</title><rect x="107.6" y="101" width="0.1" height="15.0" fill="rgb(252,95,32)" rx="2" ry="2" />
<text  x="110.56" y="111.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (21 samples, 0.01%)</title><rect x="107.6" y="85" width="0.1" height="15.0" fill="rgb(247,21,41)" rx="2" ry="2" />
<text  x="110.56" y="95.5" ></text>
</g>
<g >
<title>error_entry (57 samples, 0.04%)</title><rect x="1179.0" y="293" width="0.4" height="15.0" fill="rgb(218,203,35)" rx="2" ry="2" />
<text  x="1181.95" y="303.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (15 samples, 0.01%)</title><rect x="110.1" y="69" width="0.2" height="15.0" fill="rgb(222,200,10)" rx="2" ry="2" />
<text  x="113.15" y="79.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (55 samples, 0.04%)</title><rect x="109.7" y="53" width="0.4" height="15.0" fill="rgb(227,194,1)" rx="2" ry="2" />
<text  x="112.72" y="63.5" ></text>
</g>
<g >
<title>clear_page_erms (38 samples, 0.02%)</title><rect x="109.8" y="37" width="0.3" height="15.0" fill="rgb(231,137,51)" rx="2" ry="2" />
<text  x="112.77" y="47.5" ></text>
</g>
<g >
<title>__clone (72 samples, 0.05%)</title><rect x="102.2" y="261" width="0.6" height="15.0" fill="rgb(243,71,7)" rx="2" ry="2" />
<text  x="105.21" y="271.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (20 samples, 0.01%)</title><rect x="105.8" y="69" width="0.2" height="15.0" fill="rgb(227,214,20)" rx="2" ry="2" />
<text  x="108.83" y="79.5" ></text>
</g>
<g >
<title>clear_page_erms (124 samples, 0.08%)</title><rect x="1181.3" y="181" width="0.9" height="15.0" fill="rgb(248,25,21)" rx="2" ry="2" />
<text  x="1184.30" y="191.5" ></text>
</g>
<g >
<title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (1,853 samples, 1.18%)</title><rect x="1080.1" y="309" width="14.0" height="15.0" fill="rgb(232,22,2)" rx="2" ry="2" />
<text  x="1083.08" y="319.5" ></text>
</g>
<g >
<title>__lru_cache_add (67 samples, 0.04%)</title><rect x="1183.0" y="197" width="0.5" height="15.0" fill="rgb(213,37,51)" rx="2" ry="2" />
<text  x="1186.00" y="207.5" ></text>
</g>
<g >
<title>__schedule (21 samples, 0.01%)</title><rect x="107.6" y="165" width="0.1" height="15.0" fill="rgb(233,119,20)" rx="2" ry="2" />
<text  x="110.56" y="175.5" ></text>
</g>
<g >
<title>find_lock_entry (19 samples, 0.01%)</title><rect x="110.9" y="165" width="0.2" height="15.0" fill="rgb(228,194,13)" rx="2" ry="2" />
<text  x="113.91" y="175.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (77 samples, 0.05%)</title><rect x="1182.9" y="213" width="0.6" height="15.0" fill="rgb(225,9,39)" rx="2" ry="2" />
<text  x="1185.93" y="223.5" ></text>
</g>
<g >
<title>generic_file_write_iter (631 samples, 0.40%)</title><rect x="102.8" y="181" width="4.7" height="15.0" fill="rgb(236,20,9)" rx="2" ry="2" />
<text  x="105.76" y="191.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (20 samples, 0.01%)</title><rect x="110.7" y="149" width="0.2" height="15.0" fill="rgb(205,22,3)" rx="2" ry="2" />
<text  x="113.74" y="159.5" ></text>
</g>
<g >
<title>__lru_cache_add (32 samples, 0.02%)</title><rect x="105.7" y="85" width="0.3" height="15.0" fill="rgb(250,193,9)" rx="2" ry="2" />
<text  x="108.74" y="95.5" ></text>
</g>
<g >
<title>crossbeam_deque::Stealer&lt;T&gt;::steal (15 samples, 0.01%)</title><rect x="1189.2" y="293" width="0.1" height="15.0" fill="rgb(221,82,46)" rx="2" ry="2" />
<text  x="1192.23" y="303.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::push (27,591 samples, 17.63%)</title><rect x="193.6" y="309" width="208.1" height="15.0" fill="rgb(218,41,22)" rx="2" ry="2" />
<text  x="196.62" y="319.5" >alloc::vec::Vec&lt;T&gt;::push</text>
</g>
<g >
<title>unmap_single_vma (101 samples, 0.06%)</title><rect x="111.3" y="181" width="0.8" height="15.0" fill="rgb(242,4,17)" rx="2" ry="2" />
<text  x="114.30" y="191.5" ></text>
</g>
<g >
<title>core::ptr::&lt;impl *const T&gt;::offset (5,727 samples, 3.66%)</title><rect x="805.2" y="309" width="43.2" height="15.0" fill="rgb(252,220,1)" rx="2" ry="2" />
<text  x="808.23" y="319.5" >core..</text>
</g>
<g >
<title>do_syscall_64 (632 samples, 0.40%)</title><rect x="102.8" y="261" width="4.7" height="15.0" fill="rgb(246,120,4)" rx="2" ry="2" />
<text  x="105.76" y="271.5" ></text>
</g>
<g >
<title>native_write_msr (48 samples, 0.03%)</title><rect x="102.3" y="133" width="0.4" height="15.0" fill="rgb(230,22,23)" rx="2" ry="2" />
<text  x="105.33" y="143.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (117 samples, 0.07%)</title><rect x="111.2" y="293" width="0.9" height="15.0" fill="rgb(246,221,13)" rx="2" ry="2" />
<text  x="114.18" y="303.5" ></text>
</g>
<g >
<title>x86_pmu_enable (21 samples, 0.01%)</title><rect x="107.6" y="117" width="0.1" height="15.0" fill="rgb(251,46,24)" rx="2" ry="2" />
<text  x="110.56" y="127.5" ></text>
</g>
<g >
<title>finish_task_switch (68 samples, 0.04%)</title><rect x="102.2" y="213" width="0.6" height="15.0" fill="rgb(221,80,40)" rx="2" ry="2" />
<text  x="105.24" y="223.5" ></text>
</g>
<g >
<title>alloc_pages_vma (241 samples, 0.15%)</title><rect x="1181.1" y="213" width="1.8" height="15.0" fill="rgb(233,182,46)" rx="2" ry="2" />
<text  x="1184.10" y="223.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (64 samples, 0.04%)</title><rect x="102.3" y="149" width="0.4" height="15.0" fill="rgb(250,53,41)" rx="2" ry="2" />
<text  x="105.26" y="159.5" ></text>
</g>
<g >
<title>new_sync_write (631 samples, 0.40%)</title><rect x="102.8" y="197" width="4.7" height="15.0" fill="rgb(225,180,51)" rx="2" ry="2" />
<text  x="105.76" y="207.5" ></text>
</g>
</g>
</svg>
